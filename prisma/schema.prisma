// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  extensions      = [citext]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id               String   @id @default(cuid())
  name             String
  gradeSystem      String   @map("grade_system")
  fontGrade        String?  @map("font_grade")
  huecoGrade       String?  @map("hueco_grade")
  url              String?
  updatedAt        DateTime @default(now())
  imageS3ObjectKey String?  @map("image_s3_object_key")

  ownerId   String           @map("owner_id")
  owner     AuthUser         @relation(fields: [ownerId], references: [id])
  createdAt DateTime         @default(now()) @map("created_at")
  sessions  ProjectSession[]

  @@map("project")
}

model ProjectSession {
  id    String   @id @default(cuid())
  notes String?
  date  DateTime
  sent  Boolean

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  projectId String   @map("project_id")

  @@map("project_session")
}

model ExerciseGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id])

  name              String
  exercises         ExerciseEvent[]
  trainingCycle     TrainingCycle?     @relation(fields: [trainingCycleId], references: [id])
  trainingCycleId   Int?               @map("training_cycle_id")
  trainingCycleDays TrainingCycleDay[]

  @@map("exercise_group")
}

model Exercise {
  id               String   @id @default(cuid())
  // name has a unique constraint performed manually
  // See migration 20230609114101_add_exercise_resource
  name             String
  type             String
  difficulty       String?
  videoUrl         String?
  muscleGroup      String?  @map("muscle_group")
  primeMoverMuscle String?  @map("prime_mover_muscle")
  secondaryMuscle  String?  @map("secondary_muscle")
  tertiaryMuscle   String?  @map("tertiary_muscle")
  primaryEquipment String?  @map("primary_equipment")
  posture          String?  @map("posture")
  fieldsToShow     String[] @map("fields_to_show")

  createdAt           DateTime        @default(now()) @map("created_at")
  createdBy           AuthUser        @relation(fields: [createdByAuthUserId], references: [id])
  createdByAuthUserId String          @map("created_by_auth_user_id")
  exerciseEvents      ExerciseEvent[]
  CustomQuery         CustomQuery[]

  @@map("exercise")
}

model ExerciseEvent {
  id                 Int               @id @default(autoincrement())
  createdAt          DateTime          @default(now()) @map("created_at")
  date               DateTime?
  name               String?
  sets               Int               @default(0)
  reps               Int               @default(0)
  weight             Float             @default(0)
  seconds            Int               @default(0)
  minutes            Int               @default(0)
  difficulty         Int?
  notes              String?
  exercise           Exercise?         @relation(fields: [exerciseId], references: [id])
  ownerId            String            @map("owner_id")
  owner              AuthUser          @relation(fields: [ownerId], references: [id])
  // A list of dates that this exercise has been marked completed for
  markedCompletions  DateTime[]
  exerciseGroup      ExerciseGroup?    @relation(fields: [exerciseGroupId], references: [id], onDelete: Cascade)
  exerciseGroupId    Int?
  trainingCycleDay   TrainingCycleDay? @relation(fields: [trainingCycleDayId], references: [id], onDelete: Cascade)
  trainingCycleDayId Int?
  exerciseId         String?           @map("exercise_id")

  @@map("exercise_event")
}

model ExerciseEventCompletion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  @@map("exercise_event_completion")
}

model TrainingCycleDay {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  assignedBy String   @map("assigned_by")

  dayOfTheWeek Int
  description  String

  trainingCycleId Int             @map("training_cycle_id")
  trainingCycle   TrainingCycle   @relation(fields: [trainingCycleId], references: [id], onDelete: Cascade)
  exerciseGroups  ExerciseGroup[]
  exercises       ExerciseEvent[]

  @@map("training_cycle_day")
}

model TrainingProgram {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  name      String

  // Fields for template functionality
  isPublic           Boolean @default(false) @map("is_public")
  description        String?
  duplications       Int     @default(0) @map("use_count")
  parentId           String? @map("parent_id")
  privateAccessToken String  @default(dbgenerated("gen_random_uuid()")) @map("private_access_token") @db.Uuid

  ownerId                       String                         @map("owner_id")
  owner                         AuthUser                       @relation(fields: [ownerId], references: [id])
  trainingProgramActivations    TrainingProgramActivation[]
  trainingCycles                TrainingCycle[]
  trainingProgramScheduledSlots TrainingProgramScheduledSlot[]
  saves                         TrainingProgramSave[]

  @@map("training_program")
}

model TrainingProgramSave {
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String          @map("training_program_id")
  user              AuthUser        @relation(fields: [userId], references: [id])
  userId            String          @map("user_id")

  @@id([trainingProgramId, userId])
  @@map("training_program_on_auth_user")
}

model TrainingProgramScheduledSlot {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  duration  Int
  order     Int

  trainingProgramId String          @map("training_program_id")
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingCycles    TrainingCycle[]

  @@map("training_program_scheduled_slot")
}

model TrainingProgramActivation {
  id                String          @id @default(cuid())
  startDate         DateTime        @default(now()) @map("start_date")
  trainingProgramId String          @map("training_program_id")
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  ownerId           String          @map("owner_id")
  owner             AuthUser        @relation(fields: [ownerId], references: [id])

  @@map("training_program_activation")
}

model TrainingCycle {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  name      String

  // Fields for template functionality
  isPublic           Boolean @default(false) @map("is_public")
  description        String?
  duplications       Int     @default(0) @map("use_count")
  parentId           Int?    @map("parent_id")
  privateAccessToken String  @default(dbgenerated("gen_random_uuid()")) @map("private_access_token") @db.Uuid

  trainingProgramId String?          @map("training_program_id")
  trainingProgram   TrainingProgram? @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)

  ownerId                       String                         @map("owner_id")
  owner                         AuthUser                       @relation(fields: [ownerId], references: [id])
  days                          TrainingCycleDay[]
  exerciseGroups                ExerciseGroup[]
  profile                       Profile[]
  Widget                        Widget[]
  trainingProgramScheduledSlots TrainingProgramScheduledSlot[]
  saves                         TrainingCycleSave[]
  activations                   TrainingCycleActivation[]

  @@unique([trainingProgramId, name])
  @@map("training_cycle")
}

model TrainingCycleSave {
  trainingCycle   TrainingCycle @relation(fields: [trainingCycleId], references: [id])
  trainingCycleId Int           @map("training_cycle_id")
  user            AuthUser      @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")

  @@id([trainingCycleId, userId])
  @@map("training_cycle_on_auth_user")
}

model TrainingCycleActivation {
  trainingCycle   TrainingCycle @relation(fields: [trainingCycleId], references: [id])
  trainingCycleId Int           @map("training_cycle_id")
  user            AuthUser      @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")

  @@id([trainingCycleId, userId])
  @@map("training_cycle_activation")
}

model Metric {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now()) @map("created_at")
  date           DateTime
  name           String
  value          Float
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  journalEntryId Int

  ownerId String   @map("owner_id")
  owner   AuthUser @relation(fields: [ownerId], references: [id])

  @@map("metric")
}

model JournalEntry {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  date      DateTime
  type      String
  content   String
  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id])
  metrics   Metric[]

  @@map("journal_entry")
}

model Profile {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now()) @map("created_at")
  goals           String?
  ownerId         String         @unique @map("owner_id")
  owner           AuthUser       @relation(fields: [ownerId], references: [id])
  TrainingCycle   TrainingCycle? @relation(fields: [trainingCycleId], references: [id])
  trainingCycleId Int?

  @@map("profile")
}

model CalendarEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id])

  dateStart DateTime @map("date_start")
  dateEnd   DateTime @map("date_end")
  title     String
  content   String?
  color     String

  @@map("calendar_event")
}

model CustomQuery {
  id       String    @id @default(cuid())
  name     String
  table    String
  equation String
  exercise Exercise? @relation(fields: [exerciseId], references: [id])
  metric   String?

  conditions CustomQueryCondition[]
  dataset    Dataset                @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  datasetId  String                 @map("dataset_id")
  createdAt  DateTime               @default(now()) @map("created_at")
  ownerId    String                 @map("owner_id")
  exerciseId String?                @map("exercise_id")

  @@map("custom_query")
}

model CustomQueryCondition {
  id        String @id @default(cuid())
  column    String
  condition String
  value     Float

  // User can decide to use a value set on the widget object for
  // use in the simple editor.
  useWidgetField   Boolean @default(false) @map("use_widget_field")
  widgetFieldToUse String? @map("widget_field_to_use")

  customQuery   CustomQuery? @relation(fields: [customQueryId], references: [id], onDelete: Cascade)
  customQueryId String?      @map("custom_query_id")

  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")

  @@map("query_condition")
}

model Widget {
  id          String  @id @default(cuid())
  name        String
  description String?
  width       String
  order       Int
  type        String
  isTemplate  Boolean @default(false) @map("is_template")
  useCount    Int     @default(0) @map("use_count")
  // Parent template widget id
  parentId    String?
  isPublished Boolean @default(false) @map("is_published")

  // Top level values for the simple editor
  sets    Int?
  reps    Int?
  weight  Int?
  seconds Int?
  minutes Int?

  // For chart and calendar heatmap type
  datasets      Dataset[]
  // For exercise event calendars
  trainingCycle TrainingCycle? @relation(fields: [trainingCycleId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now()) @map("created_at")
  ownerId         String   @map("owner_id")
  owner           AuthUser @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  trainingCycleId Int?     @map("training_cycle_id")

  @@map("widget")
}

model Dataset {
  id    String @id @default(cuid())
  type  String @default("line")
  name  String
  color String

  createdAt     DateTime      @default(now()) @map("created_at")
  ownerId       String        @map("owner_id")
  widget        Widget        @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  widgetId      String        @map("widget_id")
  customQueries CustomQuery[]

  @@map("dataset")
}

model AuthUser {
  id        String   @id @unique
  createdAt DateTime @default(now()) @map("created_at")
  username  String   @unique @db.Citext
  email     String   @unique

  auth_session              AuthSession[]
  auth_key                  AuthKey[]
  journalEntry              JournalEntry[]
  exerciseEvents            ExerciseEvent[]
  profile                   Profile?
  trainingCycle             TrainingCycle[]
  exerciseGroup             ExerciseGroup[]
  metric                    Metric[]
  calendarEvent             CalendarEvent[]
  AuthPasswordReset         AuthPasswordReset[]
  Project                   Project[]
  ProjectSession            ProjectSession[]
  Exercise                  Exercise[]
  Widget                    Widget[]
  TrainingProgram           TrainingProgram[]
  TrainingProgramActivation TrainingProgramActivation[]
  savedTrainingCycles       TrainingCycleSave[]
  saves                     TrainingProgramSave[]
  trainingCycleActivations  TrainingCycleActivation[]

  @@map("user")
}

// Maybe not required?
model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model AuthKey {
  id              String   @id @unique @db.Citext
  hashed_password String?
  user_id         String
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model AuthPasswordReset {
  userId  String   @id @unique @map("user_id")
  user    AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  token   String   @unique @default(cuid())
  expires DateTime

  @@map("auth_password_reset")
}
