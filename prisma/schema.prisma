// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id])

  name           String
  type           String @default("line")
  patternToMatch String @map("pattern_to_match")
  matchAgainst   String @map("match_against")
  equation       String

  @@map("chart")
}

model ExerciseGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id])

  name                String
  exercises           ExerciseEvent[]
  trainingProgram     TrainingProgram?     @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId   Int?                 @map("training_program_id")
  trainingProgramDays TrainingProgramDay[]

  @@map("exercise_group")
}

model ExerciseEvent {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  date       DateTime?
  name       String
  sets       Int       @default(0)
  reps       Int       @default(0)
  weight     Float     @default(0)
  seconds    Int       @default(0)
  minutes    Int       @default(0)
  difficulty Int?
  notes      String    @default("")
  ownerId    String    @map("owner_id")
  owner      AuthUser  @relation(fields: [ownerId], references: [id])

  // These values exist for the case that an EE is simply an exercise in a program
  markedCompletions    DateTime[]
  exerciseGroup        ExerciseGroup?      @relation(fields: [exerciseGroupId], references: [id], onDelete: Cascade)
  exerciseGroupId      Int?
  trainingProgramDay   TrainingProgramDay? @relation(fields: [trainingProgramDayId], references: [id], onDelete: Cascade)
  trainingProgramDayId Int?

  @@map("exercise_event")
}

model ExerciseEventCompletion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  @@map("exercise_event_completion")
}

model TrainingProgramDay {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  assignedBy String   @map("assigned_by")

  dayOfTheWeek Int
  description  String

  trainingProgramId Int             @map("training_program_id")
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  exerciseGroups    ExerciseGroup[]
  exercises         ExerciseEvent[]

  @@map("training_program_day")
}

model TrainingProgram {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  name      String

  ownerId        String               @map("owner_id")
  owner          AuthUser             @relation(fields: [ownerId], references: [id])
  days           TrainingProgramDay[]
  exerciseGroups ExerciseGroup[]
  profile        Profile[]

  @@map("training_program")
}

model Metric {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now()) @map("created_at")
  date           DateTime
  name           String
  value          Int
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])
  journalEntryId Int

  ownerId String   @map("owner_id")
  owner   AuthUser @relation(fields: [ownerId], references: [id])

  @@map("metric")
}

model JournalEntry {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  date      DateTime
  type      String
  content   String
  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id])
  metrics   Metric[]

  @@map("journal_entry")
}

model Profile {
  id                      Int              @id @default(autoincrement())
  createdAt               DateTime         @default(now()) @map("created_at")
  goals                   String
  ownerId                 String           @unique @map("owner_id")
  owner                   AuthUser         @relation(fields: [ownerId], references: [id])
  activeTrainingProgramId Int?             @map("active_training_program_id")
  activeTrainingProgram   TrainingProgram? @relation(fields: [activeTrainingProgramId], references: [id])

  @@map("profile")
}

model AuthUser {
  id        String   @id @unique
  createdAt DateTime @default(now()) @map("created_at")
  username  String   @unique
  email     String   @unique

  auth_session    AuthSession[]
  auth_key        AuthKey[]
  JournalEntry    JournalEntry[]
  ExerciseEvents  ExerciseEvent[]
  Profile         Profile?
  TrainingProgram TrainingProgram[]
  ExerciseGroup   ExerciseGroup[]
  Chart           Chart[]
  metric          Metric[]

  @@map("user")
}

// Maybe not required?
model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}
