// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  ownerId   Int      @map("owner_id")
  owner     User     @relation(fields: [ownerId], references: [id])

  name           String
  patternToMatch String @map("pattern_to_match")
  equation       String

  @@map("chart")
}

model ExerciseGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  ownerId   Int      @map("owner_id")
  owner     User     @relation(fields: [ownerId], references: [id])

  name                String
  exercises           ExerciseEvent[]
  trainingProgram     TrainingProgram?     @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId   Int?                 @map("training_program_id")
  trainingProgramDays TrainingProgramDay[]

  @@map("exercise_group")
}

model ExerciseEvent {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  date       DateTime?
  name       String
  sets       Int       @default(0)
  reps       Int       @default(0)
  weight     Int       @default(0)
  seconds    Int       @default(0)
  minutes    Int       @default(0)
  difficulty Int?
  notes      String    @default("")

  ownerId Int  @map("owner_id")
  owner   User @relation(fields: [ownerId], references: [id])

  exerciseGroup        ExerciseGroup?      @relation(fields: [exerciseGroupId], references: [id], onDelete: Cascade)
  exerciseGroupId      Int?
  trainingProgramDay   TrainingProgramDay? @relation(fields: [trainingProgramDayId], references: [id], onDelete: Cascade)
  trainingProgramDayId Int?

  @@map("exercise_event")
}

model TrainingProgramDay {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  assignedBy Int      @map("assigned_by")

  dayOfTheWeek Int
  description  String

  trainingProgramId Int             @map("training_program_id")
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  exerciseGroups    ExerciseGroup[]
  exercises         ExerciseEvent[]

  @@map("training_program_day")
}

model TrainingProgram {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  name      String

  ownerId        Int                  @map("owner_id")
  owner          User                 @relation(fields: [ownerId], references: [id])
  days           TrainingProgramDay[]
  exerciseGroups ExerciseGroup[]
  profile        Profile[]

  @@map("training_program")
}

model JournalEntry {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  date      DateTime
  type      String
  content   String
  ownerId   Int      @map("owner_id")
  owner     User     @relation(fields: [ownerId], references: [id])

  @@map("journal_entry")
}

model Profile {
  id                      Int              @id @default(autoincrement())
  createdAt               DateTime         @default(now()) @map("created_at")
  goals                   String
  ownerId                 Int              @unique @map("owner_id")
  owner                   User             @relation(fields: [ownerId], references: [id])
  activeTrainingProgramId Int?             @map("active_training_program_id")
  activeTrainingProgram   TrainingProgram? @relation(fields: [activeTrainingProgramId], references: [id])

  @@map("profile")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  username  String   @unique
  email     String   @unique

  // Prisma Required
  provider_id     String  @unique
  hashed_password String?

  Session         Session[]
  JournalEntry    JournalEntry[]
  ExerciseEvents  ExerciseEvent[]
  Profile         Profile?
  TrainingProgram TrainingProgram[]
  ExerciseGroup   ExerciseGroup[]
  Chart           Chart[]

  @@map("user")
}

// Maybe not required?
model Session {
  id           String @id @unique
  user_id      Int
  expires      BigInt
  idle_expires BigInt
  user         User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}
