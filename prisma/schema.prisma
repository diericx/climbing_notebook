// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  gradeSystem String   @map("grade_system")
  fontGrade   String?  @map("font_grade")
  huecoGrade  String?  @map("hueco_grade")
  url         String?
  updatedAt   DateTime @default(now())

  ownerId   String           @map("owner_id")
  owner     AuthUser         @relation(fields: [ownerId], references: [id])
  createdAt DateTime         @default(now()) @map("created_at")
  sessions  ProjectSession[]

  @@map("project")
}

model ProjectSession {
  id    String   @id @default(cuid())
  notes String?
  date  DateTime
  sent  Boolean

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  projectId String   @map("project_id")

  @@map("project_session")
}

model ExerciseGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id])

  name                String
  exercises           ExerciseEvent[]
  trainingProgram     TrainingProgram?     @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId   Int?                 @map("training_program_id")
  trainingProgramDays TrainingProgramDay[]

  @@map("exercise_group")
}

model ExerciseEvent {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  date       DateTime?
  name       String
  sets       Int       @default(0)
  reps       Int       @default(0)
  weight     Float     @default(0)
  seconds    Int       @default(0)
  minutes    Int       @default(0)
  difficulty Int?
  notes      String?
  ownerId    String    @map("owner_id")
  owner      AuthUser  @relation(fields: [ownerId], references: [id])

  // A list of dates that this exercise has been marked completed for
  markedCompletions    DateTime[]
  exerciseGroup        ExerciseGroup?      @relation(fields: [exerciseGroupId], references: [id], onDelete: Cascade)
  exerciseGroupId      Int?
  trainingProgramDay   TrainingProgramDay? @relation(fields: [trainingProgramDayId], references: [id], onDelete: Cascade)
  trainingProgramDayId Int?

  @@map("exercise_event")
}

model ExerciseEventCompletion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  @@map("exercise_event_completion")
}

model TrainingProgramDay {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  assignedBy String   @map("assigned_by")

  dayOfTheWeek Int
  description  String

  trainingProgramId Int             @map("training_program_id")
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  exerciseGroups    ExerciseGroup[]
  exercises         ExerciseEvent[]

  @@map("training_program_day")
}

model TrainingProgram {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  name      String
  isPublic  Boolean  @default(false) @map("is_public")

  ownerId        String               @map("owner_id")
  owner          AuthUser             @relation(fields: [ownerId], references: [id])
  days           TrainingProgramDay[]
  exerciseGroups ExerciseGroup[]
  profile        Profile[]
  Widget         Widget[]

  @@map("training_program")
}

model Metric {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now()) @map("created_at")
  date           DateTime
  name           String
  value          Int
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  journalEntryId Int

  ownerId String   @map("owner_id")
  owner   AuthUser @relation(fields: [ownerId], references: [id])

  @@map("metric")
}

model JournalEntry {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  date      DateTime
  type      String
  content   String
  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id])
  metrics   Metric[]

  @@map("journal_entry")
}

model Profile {
  id                      Int              @id @default(autoincrement())
  createdAt               DateTime         @default(now()) @map("created_at")
  goals                   String?
  ownerId                 String           @unique @map("owner_id")
  owner                   AuthUser         @relation(fields: [ownerId], references: [id])
  activeTrainingProgramId Int?             @map("active_training_program_id")
  activeTrainingProgram   TrainingProgram? @relation(fields: [activeTrainingProgramId], references: [id])

  @@map("profile")
}

model CalendarEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")
  owner     AuthUser @relation(fields: [ownerId], references: [id])

  dateStart DateTime @map("date_start")
  dateEnd   DateTime @map("date_end")
  title     String
  content   String?
  color     String

  @@map("calendar_event")
}

model CustomQuery {
  id         String                 @id @default(cuid())
  name       String
  table      String
  operator   String
  conditions CustomQueryCondition[]
  dataset    Dataset[]

  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")

  @@map("custom_query")
}

model CustomQueryCondition {
  id            String       @id @default(cuid())
  column        String
  condition     String
  value         String
  customQuery   CustomQuery? @relation(fields: [customQueryId], references: [id], onDelete: Cascade)
  customQueryId String?      @map("custom_query_id")

  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")

  @@map("query_condition")
}

model Widget {
  id    String @id @default(cuid())
  name  String
  width String
  order Int
  type  String

  // For chart and calendar heatmap type
  datasets        Dataset[]
  // For exercise event calendars
  trainingProgram TrainingProgram? @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now()) @map("created_at")
  ownerId           String   @map("owner_id")
  trainingProgramId Int?     @map("training_program_id")

  @@map("widget")
}

model Dataset {
  id            String      @id @default(cuid())
  type          String      @default("line")
  name          String
  equation      String
  color         String
  customQuery   CustomQuery @relation(fields: [customQueryId], references: [id], onDelete: Cascade)
  customQueryId String      @map("custom_query_id")

  createdAt DateTime @default(now()) @map("created_at")
  ownerId   String   @map("owner_id")
  widget    Widget   @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  widgetId  String   @map("widget_id")

  @@map("dataset")
}

model AuthUser {
  id        String   @id @unique
  createdAt DateTime @default(now()) @map("created_at")
  username  String   @unique
  email     String   @unique

  auth_session      AuthSession[]
  auth_key          AuthKey[]
  journalEntry      JournalEntry[]
  exerciseEvents    ExerciseEvent[]
  profile           Profile?
  trainingProgram   TrainingProgram[]
  exerciseGroup     ExerciseGroup[]
  metric            Metric[]
  calendarEvent     CalendarEvent[]
  AuthPasswordReset AuthPasswordReset[]
  Project           Project[]
  ProjectSession    ProjectSession[]

  @@map("user")
}

// Maybe not required?
model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model AuthPasswordReset {
  userId  String   @id @unique @map("user_id")
  user    AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  token   String   @unique @default(cuid())
  expires DateTime

  @@map("auth_password_reset")
}
