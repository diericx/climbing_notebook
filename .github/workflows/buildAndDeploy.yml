name: Build And Deploy

on:
  push:
    branches: [master]
    tags: v[0-9]+.[0-9]+.[0-9]+

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
          mask-password: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ steps.login-ecr.outputs.registry }}/z5p3p3j8/climbing-notebook
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

  deploy-prod:
    name: Deploy Prod
    runs-on: ubuntu-24.04
    needs: build
    if: startsWith( github.ref, 'refs/tags/')
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      # There is a bug either in ssh-action or tailscale action that precludes the use
      # of DNS in the former, so IPs must be captured here.
      - name: netmap
        id: tailscale-netmap
        run: |
          ip=$(tailscale status | grep '${{ secrets.HOST_STAGING }}' | awk '{print $1}')
          echo "HOST_IP=$ip" >> "$GITHUB_OUTPUT"

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Render template
        id: render_template
        uses: chuhlomin/render-template@v1.7
        with:
          template: docker-compose.yml.template
          vars: |
            image: public.ecr.aws/z5p3p3j8/climbing-notebook:sha-${{ steps.vars.outputs.sha_short }}
            host: climbingnotebook.com
            db_url_secret: cn_prod_db_url
            name: web

      - name: run commands to deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.tailscale-netmap.outputs.HOST_IP }}
          username: ${{ secrets.USERNAME_PROD }}
          key: ${{ secrets.SSH_KEY_PROD }}
          port: ${{ secrets.PORT_PROD }}
          script: |
            docker container prune -f
            docker image prune -f -a
            echo "${{ steps.render_template.outputs.result }}" > /home/decker/docker_compose/cn_prod.yml
            docker compose -f /home/decker/docker_compose/cn_prod.yml pull
            docker compose -f /home/decker/docker_compose/cn_prod.yml -p cn-prod up -d

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-24.04
    needs: build
    if: startsWith( github.ref, 'refs/heads/')
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      # There is a bug either in ssh-action or tailscale action that precludes the use
      # of DNS in the former, so IPs must be captured here.
      - name: netmap
        id: tailscale-netmap
        run: |
          ip=$(tailscale status | grep '${{ secrets.HOST_STAGING }}' | awk '{print $1}')
          echo "HOST_IP=$ip" >> "$GITHUB_OUTPUT"

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Render template
        id: render_template
        uses: chuhlomin/render-template@v1.7
        with:
          template: docker-compose.yml.template
          vars: |
            image: public.ecr.aws/z5p3p3j8/climbing-notebook:sha-${{ steps.vars.outputs.sha_short }}
            host: staging.climbingnotebook.com
            db_url_secret: cn_staging_db_url
            name: web

      - name: run commands to deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.tailscale-netmap.outputs.HOST_IP }}
          username: ${{ secrets.USERNAME_STAGING }}
          key: ${{ secrets.SSH_KEY_STAGING }}
          port: ${{ secrets.PORT_STAGING }}
          script: |
            docker container prune -f
            docker image prune -f -a
            echo "${{ steps.render_template.outputs.result }}" > /home/decker/docker_compose/cn_staging.yml
            docker compose -f /home/decker/docker_compose/cn_staging.yml pull
            docker compose -f /home/decker/docker_compose/cn_staging.yml -p cn-staging up -d
